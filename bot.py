from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
import sqlite3
import config

bot = Bot(token="—Ç–æ–∫–µ–Ω")

storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class UserInformation(StatesGroup):
    us_name = State()
    us_insta = State()
    us_city = State()
    us_gender = State()
    liked_id = State()
    ocenka_wait = State()
    ocenka_wait_city = State()
    ocenka_wait_gender = State()
    city_wait = State()
    gender_wait = State()
    photo_wait = State()
    change_name = State()
    change_inst = State()
    change_city = State()
    change_gender = State()
    change_photo = State()
    old = State()
    tgname = State()
    comment_city = State()
    comment_gender = State()
    comment_anyway = State()
    change_old = State()


class dbinfo(StatesGroup):
    userid = State()
    username = State()
    report = State()
    senduserid = State()
    sendusermsg = State()


conn = sqlite3.connect('database.db', check_same_thread=False)
cursor = conn.cursor()


def db_table_val(user_id: int, user_name: str, user_instagram: str, user_city: str, user_gender: str, user_old: str, user_tgname: str):
    cursor.execute('INSERT INTO register (user_id, user_name, user_instagram, user_city, user_gender, user_old, user_tgname) VALUES (?, ?, ?, ?, ?, ?, ?)', (user_id, user_name, user_instagram, user_city, user_gender, user_old, user_tgname))
    conn.commit()


@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    joinedFile = open("userstats.txt", "r")
    joinedUsers = set()
    for line in joinedFile:
        joinedUsers.add(line.strip())

    if not str(message.chat.id) in joinedUsers:
        joinedFile = open("userstats.txt", "a")
        joinedFile.write(str(message.chat.id) + "\n")
        joinedUsers.add(message.chat.id)
    try:
        select_sql = f"SELECT user_name FROM register WHERE user_id = {message.from_user.id}"
        cursor.execute(select_sql)
        result = cursor.fetchall()
        for data2 in result:
            name = data2[0]
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –ª—é–¥–µ–π üëÅ")
        button2 = types.KeyboardButton(text='–ú–æ—è –∞–Ω–∫–µ—Ç–∞ üë§')
        button3 = types.KeyboardButton(text='–†–µ–ø–æ—Ä—Ç üÜò')
        keyboard.add(button1, button2, button3)
        await message.answer(f'üçÉ {name}, –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.',
                             reply_markup=keyboard)
    except:
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. –Ø -  {config.bot_name}.\n–ß—Ç–æ —è –¥–µ–ª–∞—é?\n–Ø –ø–æ–º–æ–≥–∞—é –ª—é–¥—è–º –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π, –æ—Ç–Ω–æ—à–µ–Ω–∏—è.')
        await message.answer(
            '–°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ-–±—ã —Ç—ã —Å–º–æ–≥(–ª–∞) –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π, –∞ –¥—Ä—É–≥–∏–µ —Å–º–æ–≥–ª–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Ç–µ–±—è üòú')
        await message.answer('–í—Å–µ –¥–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã –¥—Ä—É–≥–∏–º –ª—é–¥—è–º! –ü—Ä–∏—Å—Ç—É–ø–∏–º...')
        await message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        await UserInformation.us_name.set()


@dp.message_handler(state=UserInformation.us_name)
async def get_name(message: types.Message, state: FSMContext):
    s = message.text
    f = (s.count('.'))
    if f > 0:
        await message.answer('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞.')
    else:
        await state.update_data(us_name=message.text)
        keyboard_gender = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")
        button2 = types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")
        keyboard_gender.add(button1, button2)
        await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª.", reply_markup=keyboard_gender)
        await UserInformation.us_gender.set()


@dp.message_handler(state=UserInformation.us_gender)
async def get_name(message: types.Message, state: FSMContext):
    if message.text == '–ú—É–∂—Å–∫–æ–π' or message.text == '–ñ–µ–Ω—Å–∫–∏–π':
        await state.update_data(us_gender=message.text)
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π Instagram", reply_markup=types.ReplyKeyboardRemove())
        await UserInformation.us_insta.set()
    else:
        await message.answer("–£–ø—Å, –æ—à–∏–±–∫–∞ ü•∫\n –í—ã–±–µ—Ä–∏ –ø–æ–ª –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ!")


@dp.message_handler(state=UserInformation.us_insta)
async def get_insta(message: types.Message, state: FSMContext):
    s = message.text
    f = (s.count('.'))
    if f > 0:
        await message.answer('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞.')
    else:
        await state.update_data(us_insta=message.text)
        await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥")
        await UserInformation.us_city.set()


@dp.message_handler(state=UserInformation.us_city)
async def get_old(message: types.Message, state: FSMContext):
    s = message.text
    f = (s.count('.'))
    if f > 0:
        await message.answer('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞.')
    else:
        await state.update_data(us_city=message.text)
        await message.answer('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
        await UserInformation.old.set()


@dp.message_handler(state=UserInformation.old)
async def get_city(message: types.Message, state: FSMContext):
    try:
        s = int(message.text)
        await state.update_data(old=message.text)
        await message.answer('–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.')
        await UserInformation.photo_wait.set()
    except:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É!')


@dp.message_handler(state=UserInformation.photo_wait, content_types=['photo'])
async def get_photo(message: types.Message, state: FSMContext):
    await message.photo[-1].download(f'photos\\{message.from_user.id}.jpeg')
    data = await state.get_data()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –ª—é–¥–µ–π üëÅ")
    button2 = types.KeyboardButton(text='–ú–æ—è –∞–Ω–∫–µ—Ç–∞ üë§')
    button3 = types.KeyboardButton(text='–†–µ–ø–æ—Ä—Ç üÜò')
    keyboard.add(button1, button2, button3)
    us_name = data['us_name']
    us_gender = data['us_gender']
    us_instagram = data['us_insta']
    us_city = data['us_city']
    old = data['old']
    db_table_val(user_id=message.from_user.id, user_name=us_name, user_instagram=us_instagram, user_city=us_city,
                 user_gender=us_gender, user_old=old, user_tgname=message.from_user.username)
    await message.answer(
        '–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π ü•∞\n–ö–æ–≥–¥–∞ —Ç–µ–±—è –±—É–¥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ª—é–¥–∏, —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∏—Ö –∞–Ω–∫–µ—Ç—ã.\n –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç –º–µ–Ω—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è üòá',
        reply_markup=keyboard)
    await state.finish()


@dp.message_handler(content_types=['text'], text='–ê–Ω–∫–µ—Ç—ã')
async def db_conn(message: types.Message):
    if message.from_user.id == config.develop_id:
        conn = sqlite3.connect('database.db', check_same_thread=False)
        cursor = conn.cursor()
        d = sum(1 for line in open('userstats.txt'))
        await message.answer(f'–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ DataBaseSqlie3\n–ê–Ω–∫–µ—Ç –≤ –±–∞–∑–µ: {d}')
        await message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        await dbinfo.userid.set()


@dp.message_handler(state=dbinfo.userid)
async def db_search_info_id(message: types.Message, state: FSMContext):
    await state.update_data(userid=message.text)
    select_sql = (f"SELECT user_id FROM register WHERE user_id = {message.text}")
    cursor.execute(select_sql)
    result = cursor.fetchall()
    if cursor.fetchone() is None:
        await message.answer(f'[Error DB] ID Invalid.')
    elif cursor.fetchone() is {user_id}:
        select_sql = f"SELECT user_name, user_instagram, user_city, sr_ocenka, kolvo_ocenok, user_gender, user_old, user_tgname FROM register WHERE user_id = {message.text}"
        cursor.execute(select_sql)
        result = cursor.fetchall()
        for data in result:
            name = data[0]
            insta = data[1]
            city = data[2]
            ocenka = data[3]
            kolvo = data[4]
            gender = data[5]
            old = data[6]
            tgname = data[7]
            await bot.send_photo(message.chat.id, types.InputFile(f'./photos/{message.text}.jpeg'),
                                 caption=f"–í–æ—Ç –∏–Ω—Ñ–∞ –æ (@{tgname}) [{tgname}](tg://user?id={message.text}):\n\nüë§ –ò–º—è: " + str(
                                     name) + "\nü•ë –í–æ–∑—Ä–∞—Å—Ç: " + str(old) + "\nüë¨ –ü–æ–ª: " + str(
                                     gender) + "\nüí´ Inst: " + str(insta) + "\nüåé –ì–æ—Ä–æ–¥: " + str(
                                     city) + "\n\nüìà –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: " + str(ocenka) + " ‚≠ê", parse_mode='Markdown')
            await state.finish()


@dp.message_handler(content_types=['text'], text='–†–µ–ø–æ—Ä—Ç üÜò')
async def report_send(message: types.Message):
    await message.answer(
        "–û–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω—É—é —Å—É—Ç—å –∂–∞–ª–æ–±—ã, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø–∏—Å–∞—Ç—å —è—Å–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ.\n\n–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–∫–µ—Ç—É, –≤–≤–µ–¥–∏—Ç–µ ID –ê–Ω–∫–µ—Ç—ã.")
    await dbinfo.report.set()


@dp.message_handler(state=dbinfo.report)
async def db_search_info_id(message: types.Message, state: FSMContext):
    await state.update_data(report=message.text)
    select_sql = f"SELECT user_name, user_instagram, user_city, sr_ocenka, kolvo_ocenok, user_gender, user_old, user_tgname FROM register WHERE user_id = {message.from_user.id}"
    cursor.execute(select_sql)
    result = cursor.fetchall()
    for data in result:
        name = data[0]
        insta = data[1]
        city = data[2]
        ocenka = data[3]
        kolvo = data[4]
        gender = data[5]
        old = data[6]
        tgname = data[7]
    await bot.send_message(config.admin_chat,
                           f"–ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç –æ—Ç [{tgname}](tg://user?id={message.from_user.id}):\nTelegram ID –ê–≤—Ç–æ—Ä–∞: {message.from_user.id}\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message.text}",
                           parse_mode='Markdown')
    await message.answer('–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 1 —á–∞—Å')
    await dbinfo.next()


@dp.message_handler(content_types=['text'])
async def message(message: types.Message):
    if message.text == '/dev':
        if message.from_user.id == config.develop_id:
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            button2 = types.KeyboardButton(text='–ê–Ω–∫–µ—Ç—ã')
            keyboard.add(button1, button2)
            await message.answer(f'–ü—Ä–∏–≤–µ—Ç, –º–æ–π –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å! –ß—Ç–æ –ø–æ–∂–µ–ª–∞–µ—à—å –Ω–∞ —ç—Ç–æ—Ç —Ä–∞–∑?', reply_markup=keyboard)
    if message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        if message.from_user.id == config.develop_id:
            d = sum(1 for line in open('userstats.txt'))
            await message.answer(
                f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *{d}* \n–°–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n–û—Ü–µ–Ω–∏–ª–∏ "n" —Ä–∞–∑\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: [–º–∞–∫—Å–∏–º–£—Å—ã](tg://user?id={config.develop_id})',
                parse_mode='Markdown')
    if message.text == '–ú–æ—è –∞–Ω–∫–µ—Ç–∞ üë§':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton(text="–ù–∞–∑–∞–¥ üîô")
        button2 = types.KeyboardButton(text="–°–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã ‚öôÔ∏è")
        keyboard.add(button1, button2)
        select_sql = f"SELECT user_name, user_instagram, user_city, sr_ocenka, kolvo_ocenok, user_gender, user_old FROM register WHERE user_id = {message.from_user.id}"
        cursor.execute(select_sql)
        result = cursor.fetchall()
        for data in result:
            name = data[0]
            insta = data[1]
            city = data[2]
            ocenka = data[3]
            kolvo = data[4]
            gender = data[5]
            old = data[6]
        if message.from_user.id == message.from_user.id:
            try:
                sr_ocenka1 = int(ocenka) / int(kolvo)
                sr_ocenka2 = round(sr_ocenka1, 1)
            except:
                sr_ocenka2 = 0
            await bot.send_photo(message.from_user.id, types.InputFile(f'./photos/{message.from_user.id}.jpeg'),
                                 caption="‚òÄÔ∏è –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞:\n\nüë§ –ò–º—è: " + str(name) + "\nü•ë –í–æ–∑—Ä–∞—Å—Ç: " + str(
                                     old) + "\nüë¨ –ü–æ–ª: " + str(gender) + "\nüí´ Inst: " + str(
                                     insta) + "\nüåé –ì–æ—Ä–æ–¥: " + str(city) + "\n\nüìà –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: " + str(
                                     sr_ocenka2) + "‚≠ê", reply_markup=keyboard)
    elif message.text == '–ù–∞–∑–∞–¥ üîô':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –ª—é–¥–µ–π üëÅ")
        button2 = types.KeyboardButton(text='–ú–æ—è –∞–Ω–∫–µ—Ç–∞ üë§')
        button3 = types.KeyboardButton(text='–†–µ–ø–æ—Ä—Ç üÜò')
        keyboard.add(button1, button2, button3)
        await message.answer('üçÉ –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.', reply_markup=keyboard)
    elif message.text == '–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –ª—é–¥–µ–π üëÅ':
        await message.answer('üëÅ ‚Äç–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç', reply_markup=types.ReplyKeyboardRemove())
        inlinekeyboard = types.InlineKeyboardMarkup()
        inlinekeyboard.add(types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∏–≤–∞—Ç—å –ª—é–¥–µ–π –¥—Ä—É–≥–æ–≥–æ –≥–æ—Ä–æ–¥–∞ üåé", callback_data="gorod"))
        inlinekeyboard.add(types.InlineKeyboardButton(text="–û—Ü–µ–Ω–∏–≤–∞—Ç—å –ª—é–¥–µ–π –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª–∞ üëÑ", callback_data="gender"))
        inlinekeyboard.add(types.InlineKeyboardButton(text="–ú–Ω–µ –≤—Å—ë —Ä–∞–≤–Ω–æ, –ø–æ–≥–Ω–∞–ª–∏ –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –≤—Å–µ—Ö üòå", callback_data="gonext_anyway"))
        await message.answer('–ö–æ–≥–æ –±—É–¥–µ–º –æ—Ü–µ–Ω–∏–≤–∞—Ç—å?', reply_markup=inlinekeyboard)
    elif message.text == '–°–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã ‚öôÔ∏è':
        inlinekeyboard2 = types.InlineKeyboardMarkup()
        inlinekeyboard2.add(types.InlineKeyboardButton(text="–ò–º—è", callback_data="change_name"))
        inlinekeyboard2.add(types.InlineKeyboardButton(text="–ò–Ω—Å—Ç–∞–≥—Ä–∞–º", callback_data="change_inst"))
        inlinekeyboard2.add(types.InlineKeyboardButton(text="–ì–æ—Ä–æ–¥", callback_data="change_city"))
        inlinekeyboard2.add(types.InlineKeyboardButton(text="–ü–æ–ª", callback_data="change_gender"))
        inlinekeyboard2.add(types.InlineKeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç", callback_data="change_old"))
        inlinekeyboard2.add(types.InlineKeyboardButton(text="–§–æ—Ç–æ", callback_data="change_photo"))
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ.', reply_markup=inlinekeyboard2)

@dp.callback_query_handler(text="gorod")
async def send(call: types.CallbackQuery):
    await call.message.answer('–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞')
    await call.answer()
    await UserInformation.city_wait.set()

@dp.callback_query_handler(text="gender")
async def send(call: types.CallbackQuery):
    keyboard_gender = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")
    button2 = types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")
    keyboard_gender.add(button1, button2)
    await call.message.answer('–í—ã–±–µ—Ä–∏ –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞', reply_markup=keyboard_gender)
    await call.answer()
    await UserInformation.gender_wait.set()

@dp.message_handler(state=UserInformation.city_wait)
async def get_name(message: types.Message, state: FSMContext):
    global city1
    await state.update_data(city_wait=message.text)
    data_city = await state.get_data()
    city1 = data_city['city_wait']
    select_sql = f"SELECT user_id, user_name, user_instagram, user_city, user_gender, user_old FROM register WHERE user_city = '{city1}' ORDER BY RANDOM() LIMIT 1"
    cursor.execute(select_sql)
    result = cursor.fetchall()
    for data in result:
        user_id = data[0]
        name = data[1]
        insta = data[2]
        city = data[3]
        gender = data[4]
        old = data[5]
        await state.update_data(liked_id=user_id)
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton(text="1")
        button2 = types.KeyboardButton(text='2')
        button3 = types.KeyboardButton(text='3')
        button4 = types.KeyboardButton(text='4')
        button5 = types.KeyboardButton(text='5')
        button6 = types.KeyboardButton(text='6')
        button7 = types.KeyboardButton(text='7')
        button8 = types.KeyboardButton(text='8')
        button9 = types.KeyboardButton(text='9')
        button10 = types.KeyboardButton(text='10')
        keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)
        await bot.send_photo(message.from_user.id, types.InputFile(f'./photos/{user_id}.jpeg'),
                             caption=f"üë§ –ò–º—è: " + str(name) + "\nü•ë –í–æ–∑—Ä–∞—Å—Ç: " + str(old) + "\nüë¨ –ü–æ–ª " + str(
                                 gender) + "\nüí´ Inst: " + str(insta) + "\nüåé –ì–æ—Ä–æ–¥: " + str(
                                 city) + "\n\n–û—Ü–µ–Ω–∏ –æ—Ç 1 –¥–æ 10.", reply_markup=keyboard)
        await UserInformation.ocenka_wait_city.set()

    @dp.message_handler(state=UserInformation.ocenka_wait_city)
    async def get_name(message: types.Message, state: FSMContext):
        global liked_id
        try:
            s = int(message.text)
            if 0 < s < 11:
                data = await state.get_data()
                liked_id = data['liked_id']
                select_sql = f"SELECT user_name, user_instagram, user_city, user_gender FROM register WHERE user_id = {message.from_user.id}"
                cursor.execute(select_sql)
                result = cursor.fetchall()
                for data2 in result:
                    name = data2[0]
                    insta = data2[1]
                    city = data2[2]
                await bot.send_photo(data['liked_id'], types.InputFile(f'./photos/{message.from_user.id}.jpeg'),
                                     caption=f"ü§ôüèª –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç [{message.from_user.username}](tg://user?id=({message.from_user.id}):\nüí´ Inst: {insta}\nüåé –ì–æ—Ä–æ–¥: {city}\n‚≠ê –û—Ü–µ–Ω–∫–∞: {message.text}",
                                     parse_mode='Markdown')
                inlinekeyboard = types.InlineKeyboardMarkup()
                inlinekeyboard.add(types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ ‚û°", callback_data="gonext_city"))
                inlinekeyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="comment_city"))
                inlinekeyboard.add(types.InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—Ü–µ–Ω–∫–∏ ‚ùå", callback_data="back"))
                select_sql = f"SELECT sr_ocenka, kolvo_ocenok FROM register WHERE user_id = {data['liked_id']}"
                cursor.execute(select_sql)
                result = cursor.fetchall()
                for data3 in result:
                    ocenka1 = data3[0]
                    kolvo1 = data3[1]
                ocenka2 = int(ocenka1) + int(message.text)
                kolvo2 = int(kolvo1) + 1
                sql_update_query = f"Update register set sr_ocenka = {ocenka2}, kolvo_ocenok = {kolvo2} where user_id = {data['liked_id']}"
                cursor.execute(sql_update_query)
                conn.commit()
                await message.answer(f'–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {message.text} ‚≠ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
                                     reply_markup=inlinekeyboard)
                await state.finish()
            else:
                await message.answer('–û—Ü–µ–Ω–∫–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –æ—Ç 1 –¥–æ 10!')
        except:
            await message.answer('–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!')

        @dp.callback_query_handler(text="gonext_city")
        async def send(call: types.CallbackQuery, state: FSMContext):
            select_sql1 = f"SELECT user_id, user_name, user_instagram, user_city, user_old, user_gender FROM register WHERE user_city = '{city1}' ORDER BY RANDOM() LIMIT 1"
            cursor.execute(select_sql1)
            result = cursor.fetchall()
            for data in result:
                user_id = data[0]
                name = data[1]
                insta = data[2]
                city = data[3]
                old = data[4]
                gender = data[5]
            await state.update_data(liked_id=user_id)
            await call.message.answer_photo(types.InputFile(f'./photos/{user_id}.jpeg'),
                                            caption="üë§ –ò–º—è: " + str(name) + "\nü•ë –í–æ–∑—Ä–∞—Å—Ç: " + str(
                                                old) + "\nüë¨ –ü–æ–ª " + str(gender) + "\nüí´ Inst: " + str(
                                                insta) + "\nüåé –ì–æ—Ä–æ–¥: " + str(city) + "\n\n–û—Ü–µ–Ω–∏ –æ—Ç 1 –¥–æ 10.")
            await call.answer()
            await UserInformation.ocenka_wait_city.set()
        @dp.callback_query_handler(text="comment_city")
        async def send(call: types.CallbackQuery):
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
            await UserInformation.comment_city.set()
            await call.answer()
            @dp.message_handler(state=UserInformation.comment_city)
            async def comment(message: types.Message, state: FSMContext):
                await bot.send_message(liked_id,
                                       f"ü§ôüèª –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}\n\n{message.text}")
                inlinekeyboard = types.InlineKeyboardMarkup()
                inlinekeyboard.add(types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ ‚û°", callback_data="gonext_city"))
                inlinekeyboard.add(types.InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—Ü–µ–Ω–∫–∏ ‚ùå", callback_data="back"))
                await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=inlinekeyboard)
                await state.finish()

@dp.message_handler(state=UserInformation.gender_wait)
async def get_name(message: types.Message, state: FSMContext):
    if message.text == '–ú—É–∂—Å–∫–æ–π' or message.text == '–ñ–µ–Ω—Å–∫–∏–π':
        global gender1
        await state.update_data(gender_wait=message.text)
        data_gender = await state.get_data()
        gender1 = data_gender['gender_wait']
        select_sql = f"SELECT user_id, user_name, user_instagram, user_city, user_old, user_gender FROM register WHERE user_gender = '{gender1}' ORDER BY RANDOM() LIMIT 1"
        cursor.execute(select_sql)
        result = cursor.fetchall()
        for data in result:
            user_id = data[0]
            name = data[1]
            insta = data[2]
            city = data[3]
            old = data[4]
            gender = data[5]
            await state.update_data(liked_id=user_id)
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton(text="1")
            button2 = types.KeyboardButton(text='2')
            button3 = types.KeyboardButton(text='3')
            button4 = types.KeyboardButton(text='4')
            button5 = types.KeyboardButton(text='5')
            button6 = types.KeyboardButton(text='6')
            button7 = types.KeyboardButton(text='7')
            button8 = types.KeyboardButton(text='8')
            button9 = types.KeyboardButton(text='9')
            button10 = types.KeyboardButton(text='10')
            keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)
            await bot.send_photo(message.from_user.id, types.InputFile(f'./photos/{user_id}.jpeg'),
                                 caption="üë§ –ò–º—è: " + str(name) + "\nü•ë –í–æ–∑—Ä–∞—Å—Ç: " + str(old) + "\nüë¨ –ü–æ–ª " + str(
                                     gender) + "\nüí´ Inst: " + str(insta) + "\nüåé –ì–æ—Ä–æ–¥: " + str(
                                     city) + "\n\n–û—Ü–µ–Ω–∏ –æ—Ç 1 –¥–æ 10.", reply_markup=keyboard)
            await UserInformation.ocenka_wait_gender.set()
    else:
        await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –ø–æ–ª.')

    @dp.message_handler(state=UserInformation.ocenka_wait_gender)
    async def get_name(message: types.Message, state: FSMContext):
        global liked_id
        try:
            s = int(message.text)
            if 0 < s < 11:
                data = await state.get_data()
                liked_id = data['liked_id']
                select_sql = f"SELECT user_name, user_instagram, user_city, user_gender FROM register WHERE user_id = {message.from_user.id}"
                cursor.execute(select_sql)
                result = cursor.fetchall()
                for data2 in result:
                    name = data2[0]
                    insta = data2[1]
                    city = data2[2]
                await bot.send_photo(data['liked_id'], types.InputFile(f'./photos/{message.from_user.id}.jpeg'),
                                     caption=f"ü§ôüèª –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç [{message.from_user.username}](tg://user?id=({message.from_user.id}):\nüí´ Inst: {insta}\nüåé –ì–æ—Ä–æ–¥: {city}\n‚≠ê –û—Ü–µ–Ω–∫–∞: {message.text}",
                                     parse_mode='Markdown')
                inlinekeyboard = types.InlineKeyboardMarkup()
                inlinekeyboard.add(types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ ‚û°", callback_data="gonext_gender"))
                inlinekeyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="comment_gender"))
                inlinekeyboard.add(types.InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—Ü–µ–Ω–∫–∏ ‚ùå", callback_data="back"))
                select_sql = f"SELECT sr_ocenka, kolvo_ocenok FROM register WHERE user_id = {data['liked_id']}"
                cursor.execute(select_sql)
                result = cursor.fetchall()
                for data3 in result:
                    ocenka1 = data3[0]
                    kolvo1 = data3[1]
                ocenka2 = int(ocenka1) + int(message.text)
                kolvo2 = int(kolvo1) + 1
                sql_update_query = f"Update register set sr_ocenka = {ocenka2}, kolvo_ocenok = {kolvo2} where user_id = {data['liked_id']}"
                cursor.execute(sql_update_query)
                conn.commit()
                await message.answer(f'–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {message.text}‚≠ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
                                     reply_markup=inlinekeyboard)
                await state.finish()
            else:
                await message.answer('–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10')
        except:
            await message.answer('–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ')
        @dp.callback_query_handler(text="gonext_gender")
        async def send(call: types.CallbackQuery, state: FSMContext):
            select_sql1 = f"SELECT user_id, user_name, user_instagram, user_city, user_old, user_gender FROM register WHERE user_gender = '{gender1}' ORDER BY RANDOM() LIMIT 1"
            cursor.execute(select_sql1)
            result = cursor.fetchall()
            for data in result:
                user_id = data[0]
                name = data[1]
                insta = data[2]
                city = data[3]
                old = data[4]
                gender = data[5]
            await state.update_data(liked_id=user_id)
            await call.message.answer_photo(types.InputFile(f'./photos/{user_id}.jpeg'),
                                            caption=f"üë§ –ò–º—è: " + str(name) + "\nü•ë –í–æ–∑—Ä–∞—Å—Ç: " + str(
                                                old) + "\nüë¨ –ü–æ–ª " + str(gender) + "\nüí´ Inst: " + str(
                                                insta) + "\nüåé –ì–æ—Ä–æ–¥: " + str(city) + "\n\n–û—Ü–µ–Ω–∏ –æ—Ç 1 –¥–æ 10.")
            await call.answer()
            await UserInformation.ocenka_wait_gender.set()
        @dp.callback_query_handler(text="comment_gender")
        async def send(call: types.CallbackQuery):
            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
            await UserInformation.comment_gender.set()
            await call.answer()
            @dp.message_handler(state=UserInformation.comment_gender)
            async def comment(message: types.Message, state: FSMContext):
                await bot.send_message(liked_id,
                                       f"ü§ôüèª –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}\n\n{message.text}")
                inlinekeyboard = types.InlineKeyboardMarkup()
                inlinekeyboard.add(types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ ‚û°", callback_data="gonext_gender"))
                inlinekeyboard.add(types.InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—Ü–µ–Ω–∫–∏ ‚ùå", callback_data="back"))
                await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=inlinekeyboard)
                await state.finish()


@dp.callback_query_handler(text="gonext_anyway")
async def get_name(call: types.CallbackQuery, state: FSMContext):
    select_sql = f"SELECT user_id, user_name, user_instagram, user_city, user_old, user_gender FROM register WHERE user_id != {call.from_user.id}  ORDER BY RANDOM() LIMIT 1"
    cursor.execute(select_sql)
    result = cursor.fetchall()
    for data in result:
        user_id = data[0]
        name = data[1]
        insta = data[2]
        city = data[3]
        old = data[4]
        gender = data[5]
        await state.update_data(liked_id=int(user_id))
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton(text="1")
        button2 = types.KeyboardButton(text='2')
        button3 = types.KeyboardButton(text='3')
        button4 = types.KeyboardButton(text='4')
        button5 = types.KeyboardButton(text='5')
        button6 = types.KeyboardButton(text='6')
        button7 = types.KeyboardButton(text='7')
        button8 = types.KeyboardButton(text='8')
        button9 = types.KeyboardButton(text='9')
        button10 = types.KeyboardButton(text='10')
        keyboard.add(button1, button2, button3, button4, button5, button6, button7, button8, button9, button10)
        await bot.send_photo(call.from_user.id, types.InputFile(f'./photos/{user_id}.jpeg'),
                             caption="üë§ –ò–º—è: " + str(name) + "\nü•ë –í–æ–∑—Ä–∞—Å—Ç: " + str(old) + "\nüë¨ –ü–æ–ª " + str(
                                 gender) + "\nüí´ Inst: " + str(insta) + "\nüåé –ì–æ—Ä–æ–¥: " + str(
                                 city) + "\n\n–û—Ü–µ–Ω–∏ –æ—Ç 1 –¥–æ 10.", reply_markup=keyboard)
        await call.answer()
        await UserInformation.ocenka_wait.set()

    @dp.message_handler(state=UserInformation.ocenka_wait)
    async def get_name(message: types.Message, state: FSMContext):
        global liked_id
        try:
            s = int(message.text)
            if 0 < s < 11:
                data = await state.get_data()
                liked_id = data['liked_id']
                select_sql = f"SELECT user_name, user_instagram, user_city, user_gender FROM register WHERE user_id = {message.from_user.id}"
                cursor.execute(select_sql)
                result = cursor.fetchall()
                for data2 in result:
                    name = data2[0]
                    insta = data2[1]
                    city = data2[2]
                await bot.send_photo(data['liked_id'], types.InputFile(f'./photos/{message.from_user.id}.jpeg'),
                                     caption=f"ü§ôüèª –ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –æ—Ç [{message.from_user.username}](tg://user?id=({message.from_user.id}):\nüí´ Inst: {insta}\nüåé –ì–æ—Ä–æ–¥: {city}\n‚≠ê –û—Ü–µ–Ω–∫–∞: {message.text}",
                                     parse_mode='Markdown')
                select_sql = f"SELECT sr_ocenka, kolvo_ocenok FROM register WHERE user_id = {data['liked_id']}"
                cursor.execute(select_sql)
                result = cursor.fetchall()
                for data3 in result:
                    ocenka1 = data3[0]
                    kolvo1 = data3[1]
                ocenka2 = int(ocenka1) + int(message.text)
                kolvo2 = int(kolvo1) + 1
                sql_update_query = f"Update register set sr_ocenka = {ocenka2}, kolvo_ocenok = {kolvo2} where user_id = {data['liked_id']}"
                cursor.execute(sql_update_query)
                conn.commit()
                inlinekeyboard = types.InlineKeyboardMarkup()
                inlinekeyboard.add(types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ ‚û°", callback_data="gonext_anyway"))
                inlinekeyboard.add(types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="comment_anyway"))
                inlinekeyboard.add(types.InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—Ü–µ–Ω–∫–∏ ‚ùå", callback_data="back"))
                await message.answer(f'–í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞: {message.text} ‚≠ê\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.',
                                     reply_markup=inlinekeyboard)
                await state.finish()
            else:
                await message.answer('–¢–æ–ª—å–∫–æ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10')
        except:
            await message.answer("–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ!")

    @dp.callback_query_handler(text="comment_anyway")
    async def send(call: types.CallbackQuery):
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π')
        await UserInformation.comment_anyway.set()
        await call.answer()
        @dp.message_handler(state=UserInformation.comment_anyway)
        async def comment(message: types.Message, state: FSMContext):
            await bot.send_message(liked_id, f"ü§ôüèª –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.username}\n\n{message.text}")
            inlinekeyboard = types.InlineKeyboardMarkup()
            inlinekeyboard.add(types.InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è –∞–Ω–∫–µ—Ç–∞ ‚û°", callback_data="gonext_anyway"))
            inlinekeyboard.add(types.InlineKeyboardButton(text="‚ùå –í—ã–π—Ç–∏ –∏–∑ –æ—Ü–µ–Ω–∫–∏ ‚ùå", callback_data="back"))
            await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', reply_markup=inlinekeyboard)
            await state.finish()

@dp.callback_query_handler(text="back")
async def send(call: types.CallbackQuery):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –ª—é–¥–µ–π üëÅ")
    button2 = types.KeyboardButton(text='–ú–æ—è –∞–Ω–∫–µ—Ç–∞ üë§')
    button3 = types.KeyboardButton(text='–†–µ–ø–æ—Ä—Ç üÜò')
    keyboard.add(button1, button2, button3)
    await call.message.answer('üçÉ –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.',
                              reply_markup=keyboard)
    await call.answer()

@dp.callback_query_handler(text="change_name")
async def send(call: types.CallbackQuery):
    await call.message.answer('–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
    await call.answer()
    await UserInformation.change_name.set()

    @dp.message_handler(state=UserInformation.change_name)
    async def change_name(message: types.Message, state: FSMContext):
        s = message.text
        f = (s.count('.'))
        if f == 0:
            await state.update_data(change_name=message.text)
            data = await state.get_data()
            new_name = str(data['change_name'])
            sql_update_query = f"Update register set user_name = '{new_name}' where user_id = {message.from_user.id}"
            cursor.execute(sql_update_query)
            conn.commit()
            await message.answer('–ù–æ–≤–æ–µ –∏–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
            await state.finish()
        else:
            await message.answer('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞!')


@dp.callback_query_handler(text="change_inst")
async def send(call: types.CallbackQuery):
    await call.message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ–π Instagram')
    await call.answer()
    await UserInformation.change_inst.set()

    @dp.message_handler(state=UserInformation.change_inst)
    async def change_name(message: types.Message, state: FSMContext):
        s = message.text
        f = (s.count('.'))
        if f == 0:
            await state.update_data(change_inst=message.text)
            data = await state.get_data()
            new_inst = str(data['change_inst'])
            sql_update_query = f"Update register set user_instagram = '{new_inst}' where user_id = {message.from_user.id}"
            cursor.execute(sql_update_query)
            conn.commit()
            await message.answer('–ù–æ–≤—ã–π Instagram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            await state.finish()
        else:
            await message.answer('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞!')


@dp.callback_query_handler(text="change_city")
async def send(call: types.CallbackQuery):
    await call.message.answer('–ì–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?')
    await call.answer()
    await UserInformation.change_city.set()

    @dp.message_handler(state=UserInformation.change_city)
    async def change_name(message: types.Message, state: FSMContext):
        s = message.text
        f = (s.count('.'))
        if f == 0:
            await state.update_data(change_city=message.text)
            data = await state.get_data()
            new_city = str(data['change_city'])
            sql_update_query = f"Update register set user_city = '{new_city}' where user_id = {message.from_user.id}"
            cursor.execute(sql_update_query)
            conn.commit()
            await message.answer('–ù–æ–≤—ã–π –≥–æ—Ä–æ–¥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            await state.finish()
        else:
            await message.answer('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Å—ã–ª–∫–∞!')


@dp.callback_query_handler(text="change_gender")
async def send(call: types.CallbackQuery):
    keyboard_gender = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π")
    button2 = types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")
    keyboard_gender.add(button1, button2)
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è —Å–º–µ–Ω—ã', reply_markup=keyboard_gender)
    await call.answer()
    await UserInformation.change_gender.set()

    @dp.message_handler(state=UserInformation.change_gender)
    async def change_name(message: types.Message, state: FSMContext):
        if message.text == '–ú—É–∂—Å–∫–æ–π' or message.text == '–ñ–µ–Ω—Å–∫–∏–π':
            keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã –ª—é–¥–µ–π üëÅ")
            button2 = types.KeyboardButton(text='–ú–æ—è –∞–Ω–∫–µ—Ç–∞ üë§')
            button3 = types.KeyboardButton(text='–†–µ–ø–æ—Ä—Ç üÜò')
            keyboard.add(button1, button2, button3)
            await state.update_data(change_gender=message.text)
            data = await state.get_data()
            new_gender = str(data['change_gender'])
            sql_update_query = f"Update register set user_gender = '{new_gender}' where user_id = {message.from_user.id}"
            cursor.execute(sql_update_query)
            conn.commit()
            await message.answer('–ù–æ–≤—ã–π –ø–æ–ª —É—á–∞—Ç–Ω–æ–≤–ª–µ–Ω.', reply_markup=keyboard)
            await state.finish()
        else:
            await message.answer("–£–ø—Å, –æ—à–∏–±–∫–∞ ü•∫\n –í—ã–±–µ—Ä–∏ –ø–æ–ª –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ!")


@dp.callback_query_handler(text="change_old")
async def send(call: types.CallbackQuery):
    await call.message.answer('–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
    await call.answer()
    await UserInformation.change_old.set()

    @dp.message_handler(state=UserInformation.change_old)
    async def change_name(message: types.Message, state: FSMContext):
        await state.update_data(change_old=message.text)
        try:
            data = await state.get_data()
            new_old = int(data['change_old'])
            sql_update_query = f"Update register set user_old = '{new_old}' where user_id = {message.from_user.id}"
            cursor.execute(sql_update_query)
            conn.commit()
            await message.answer('–ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            await state.finish()
        except:
            await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!')

@dp.callback_query_handler(text="change_photo")
async def send(call: types.CallbackQuery):
    await call.message.answer('–ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é')
    await call.answer()
    await UserInformation.change_photo.set()

    @dp.message_handler(state=UserInformation.change_photo, content_types=['photo'])
    async def change_name(message: types.Message, state: FSMContext):
        await message.photo[-1].download(f'photos\\{message.from_user.id}.jpeg')
        await message.answer('–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
        await state.finish()


#@dp.message_handler(content_types=['text'], text='üèÜ –¢–û–ü')
#async def rating(message: types.Message):
 #   select_sql(f"SELECT user_id, user_name, kolvo_ocenok FROM register order by kolvo_ocenok desc")
  #  cursor.execute(select_sql)
   # result = cursor.fetchall()
    #one = emo.emojize(':one:', use_aliases=True)
    #two = emo.emojize(':two:', use_aliases=True)
    #three = emo.emojize(':three:', use_aliases=True)
    #four = emo.emojize(':four:', use_aliases=True)
    #five = emo.emojize(':five:', use_aliases=True)
    #six = emo.emojize(':six:', use_aliases=True)
    #seven = emo.emojize(':seven:', use_aliases=True)
    #eight = emo.emojize(':eight:', use_aliases=True)
    #nine = emo.emojize(':nine:', use_aliases=True)
    #ten = emo.emojize(':ten:', use_aliases=True)
    #zero = emo.emojize(':zero:', use_aliases=True)
    #em = {0: zero, 1: one, 2: two, 3: three, 4: four, 5: five, 6: six, 7: seven, 8: eight, 9: nine, 10: ten}
    #message_lines = []
    #for index, item in enumerate(result, 1):
        #message_lines.append(f"{em.get(index)} [{item[1]}](tg://user?id={item[0]}): {item[2]} —Ç–æ–ø–∞")
        #am = message_lines[:10]
        #mes = '\n'.join(am)
        #await message.answer(f'–¢–û–ü –ø–æ –æ—Ü–µ–Ω–∫–∞–º\n{mes}', parse_mode='Markdown')


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
